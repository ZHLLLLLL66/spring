<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!--    1.配置monster对象/javabean
            2.在beans中可以配置多个bean
            3.bean表示就是一个java对象
            4.class属性是用于指定类的全路径->spring的底层使用反射
            5.id属性表示该java对象在spring容器中的id 通过id可以获取到该对象
    -->
    <bean class="com.zhllllll.spring.bean.Monster" id="monster01">
        <property name="monsterId" value="100"/>
        <property name="name" value="牛魔王"/>
        <property name="skill" value="芭蕉扇"/>
    </bean>
    <bean class="com.zhllllll.spring.bean.Monster" id="monster02">
        <property name="monsterId" value="200"/>
        <property name="name" value="牛魔王2"/>
        <property name="skill" value="芭蕉扇2"/>
    </bean>
    <!--    通过类型来获取
            1.当我们给某个bean对象设置属性的时候
            2.底层是使用set方法实现的
            3.如果没有set方法就会报错
    -->
    <bean class="com.zhllllll.spring.bean.Monster">
        <property name="monsterId" value="300"/>
        <property name="name" value="牛魔王3"/>
        <property name="skill" value="芭蕉扇3"/>
    </bean>

    <!--    配置monster对象并且指定构造器
            constructor-arg标签可以指定使用构造器的参数
            index 表示构造器的第几个参数  从0开始计算
            除了可以通过index 还可以通过 name/type 来指定参数方式
    -->
    <bean id="monster03" class="com.zhllllll.spring.bean.Monster">
        <constructor-arg value="200" index="0"/>
        <constructor-arg value="白骨精" index="1"/>
        <constructor-arg value="化骨绵掌" index="2"/>
    </bean>

    <bean id="monster04" class="com.zhllllll.spring.bean.Monster">
        <constructor-arg value="200" name="monsterId"/>
        <constructor-arg value="白骨精" name="name"/>
        <constructor-arg value="化骨绵掌" name="skill"/>
    </bean>

    <bean id="monster05" class="com.zhllllll.spring.bean.Monster">
        <constructor-arg value="200" type="java.lang.Integer"/>
        <constructor-arg value="白骨精" type="java.lang.String"/>
        <constructor-arg value="化骨绵掌" type="java.lang.String"/>
    </bean>

    <bean id="monster06" class="com.zhllllll.spring.bean.Monster"
          p:monsterId="500"
          p:name="红孩儿"
          p:skill="吐火"
    />

    <bean class="com.zhllllll.spring.bean.Car" id="car01">
        <property name="carId" value="001"/>
        <property name="name" value="保时捷"/>
        <property name="price" value="100W"/>
    </bean>

    <!--    配置MemberDaoImpl对象-->
    <bean class="com.zhllllll.spring.dao.MemberDAOImpl" id="memberDAO"/>
    <!--    配置MenberServiceImpl对象
            1. ref="memberDAO" 表示 MemberServiceImpl对象属性memberDao饮用的对象id=memberDAO的对象
            2.这里体现出spring容器的依赖注入
            3.注意在spring容器中，他是作为一个整体来执行的，即如果你引用到一个bean对象，对你配置的顺序没有要求
            4.建议还是按顺序 阅读时比较方便
    -->
    <bean class="com.zhllllll.spring.service.MemberServiceImpl" id="memberService">
        <property name="memberDAO" ref="memberDAO"/>
    </bean>

    <!--    配置MemberServiceImpl对象使用内部bean方式-->
    <bean class="com.zhllllll.spring.service.MemberServiceImpl" id="memberService01">
        <property name="memberDAO">
            <!--            自己配置一个内部bean-->
            <bean class="com.zhllllll.spring.dao.MemberDAOImpl"/>
        </property>
    </bean>

    <bean class="com.zhllllll.spring.bean.Master" id="master01">
        <property name="name" value="太上老君"/>
        <property name="monsterList">
            <list>
                <ref bean="monster01"/>
                <ref bean="monster02"/>
                <bean class="com.zhllllll.spring.bean.Monster">
                    <property name="name" value="金角大王"/>
                    <property name="skill" value="哪里跑"/>
                    <property name="monsterId" value="888"/>
                </bean>
            </list>
        </property>
        <!-- 给map属性赋值 -->
        <property name="monsterMap">
            <map>
                <entry>
                    <key>
                        <value>monster01</value>
                    </key>
                    <ref bean="monster01"/>
                </entry>
                <entry>
                    <key>
                        <value>monster02</value>
                    </key>
                    <ref bean="monster02"/>
                </entry>
            </map>
        </property>
        <property name="monsterSet">
            <set>
                <ref bean="monster05"/>
                <ref bean="monster06"/>
                <bean class="com.zhllllll.spring.bean.Monster">
                    <property name="monsterId" value="777"/>
                    <property name="skill" value="如来神掌"/>
                    <property name="name" value="猪八戒"/>
                </bean>
            </set>
        </property>
        <!--
        给数组属性赋值
        array标签中使用的是value bean ref
        要根据业务场景决定
        -->
        <property name="monsterName">
            <array>
                <value>小妖怪</value>
                <value>大妖怪</value>
                <value>老妖怪</value>
            </array>
        </property>
        <!--给properties属性进行配置  结构k-v形式
            string-string
        -->
        <property name="pros">
            <props>
                <prop key="username">root</prop>
                <prop key="password">123456</prop>
                <prop key="ip">127.0.0.1</prop>
            </props>
        </property>
    </bean>

    <!--定义一个utilList对象 并且指定id
    可以达到数据复用的效果
    -->
    <util:list id="myBookList">
        <value>三国演示</value>
        <value>封神榜</value>
        <value>水浒传</value>
    </util:list>
    <!--配置bookstore对象-->
    <bean class="com.zhllllll.spring.bean.BookStore" id="bookstore">
        <property name="bookList" ref="myBookList"/>
    </bean>

    <!--配置Dept对象-->
    <bean class="com.zhllllll.spring.bean.Dept" id="dept"/>
    <!--配置一个Emp对象-->
    <bean class="com.zhllllll.spring.bean.Employee" id="emp01">
        <property name="name" value="jack"/>
        <property name="dept" ref="dept"/>
        <!--这里我们希望给dept的name属性级联赋值-->
        <property name="dept.name" value="Java开发部门"/>
    </bean>

    <!--配置monster对象，通过静态工厂获得
    //通过静态工厂获取/配置bean
    //class是静态工厂的全路径
    //使用static代码块进行初始化
    // factory-method 表示指定静态工厂哪个方法进行对象创建
     <constructor-arg value="monster01"/> 指要返回哪个对象
    -->

    <bean id="my_monster01" class="com.zhllllll.spring.factory.MyStaticFactory" factory-method="getMonster">
        <constructor-arg value="monster01"/>
    </bean>

    <!--配置一个实例工厂对象-->
    <bean id="myInstanceFactory" class="com.zhllllll.spring.factory.MyInstanceFactory"/>
    <!--通过实例工厂配置Monster对象-->
    <bean id="my_monster02" class="com.zhllllll.spring.factory.MyInstanceFactory" factory-bean="myInstanceFactory"
          factory-method="getMonster">

        <constructor-arg value="monster03"/>
    </bean>

    <!--   配置Monster对象，通过FactoryBean获取
           这里的class指定要使用的FactoryBean
           key表示就是MyFactoryBean属性key
           value就是表示要获取的对象的key
    -->
    <bean id="my_monster03" class="com.zhllllll.spring.factory.MyFactoryBean">
        <property name="key"  value="monster05"/>
    </bean>

    <!--配置一个Monster对象 提供给待会继承使用
        加了abstract后这个bean本身就不能被获取了
    -->
    <bean id="monster10" class="com.zhllllll.spring.bean.Monster" abstract="true">
        <property name="name" value="蜈蚣精"/>
        <property name="skill" value="蜈蚣拳"/>
        <property name="monsterId" value="809"/>
    </bean>

    <!--配置一个Monster对象 但是和id=monster10的信息一样
        parent 指定当前这个配置的对象的属性值从 id为monster10的对象来
    -->
    <bean id="monster11" class="com.zhllllll.spring.bean.Monster" parent="monster10"/>

    <!--配置Cat对象
        在默认情况下scope属性是singleton
        在ioc容器中只会有一个这样的bean对象
        当执行getBean时返回的是同一个对象
        如果我们希望每次返回一个新的对象scope="prototype"
        设置为多实例之后 该bean是在getBean时才会创建
        如果是单例情况下 也希望getBean时在创建 可以指定懒加载 lazy-init="true" (默认值为false)
        在开发的日常来看 使用空间换时间是值得的  一般lazy-init="false" 使用默认值
        如果是prototype 不管是 true 还是 false  都是在get的时候才创建
    -->
    <bean id="cat01" class="com.zhllllll.spring.bean.Cat" scope="singleton" lazy-init="true">
        <property name="name" value="小花猫"/>
        <property name="id"  value="001"/>
    </bean>

    <bean class="com.zhllllll.spring.bean.House " id="house"
        init-method="init" destroy-method="destroy"
    >
        <property name="name" value="豪宅"/>
    </bean>

</beans>